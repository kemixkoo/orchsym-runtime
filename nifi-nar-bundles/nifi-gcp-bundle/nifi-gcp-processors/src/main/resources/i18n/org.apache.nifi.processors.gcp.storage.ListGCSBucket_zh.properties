__CapabilityDescription=Retrieves a listing of objects from an GCS bucket. For each object that is listed, creates a FlowFile that represents the object so that it can be fetched in conjunction with FetchGCSObject. This Processor is designed to run on Primary Node only in a cluster. If the primary node changes, the new Primary Node will pick up where the previous node left off without duplicating all of the data.
__Tags=google cloud, google, storage, gcs, list
GCP_Credentials_Provider_Service.displayName=GCP Credentials Provider Service
GCP_Credentials_Provider_Service.description=The Controller Service used to obtain Google Cloud Platform credentials.
gcp-project-id.displayName=Project ID
gcp-project-id.description=Google Cloud Project ID
gcp-retry-count.displayName=Number of retries
gcp-retry-count.description=How many retry attempts should be made before routing to the failure relationship.
gcp-proxy-host.displayName=Proxy host
gcp-proxy-host.description=IP or hostname of the proxy to be used
gcp-proxy-port.displayName=Proxy port
gcp-proxy-port.description=Proxy port number
gcs-bucket.displayName=Bucket
gcs-bucket.description=Bucket of the object.
gcs-prefix.displayName=Prefix
gcs-prefix.description=The prefix used to filter the object list. In most cases, it should end with a forward slash ('/').
gcs-use-generations.displayName=Use Generations
gcs-use-generations.description=Specifies whether to use GCS Generations, if applicable.  If false, only the latest version of each object will be returned.
__AllowableValue.gcs-use-generations.false.displayName=false
__AllowableValue.gcs-use-generations.true.displayName=true
__Relationship.success.description=FlowFiles are routed to this relationship after a successful Google Cloud Storage operation.
__WritesAttribute.filename.description=The name of the file
__WritesAttribute.gcs.bucket.description=Bucket of the object.
__WritesAttribute.gcs.key.description=Name of the object.
__WritesAttribute.gcs.size.description=Size of the object.
__WritesAttribute.gcs.cache.control.description=Data cache control of the object.
__WritesAttribute.gcs.component.count.description=The number of components which make up the object.
__WritesAttribute.gcs.content.disposition.description=The data content disposition of the object.
__WritesAttribute.gcs.content.encoding.description=The content encoding of the object.
__WritesAttribute.gcs.content.language.description=The content language of the object.
__WritesAttribute.mime.type.description=The MIME/Content-Type of the object
__WritesAttribute.gcs.crc32c.description=The CRC32C checksum of object's data, encoded in base64 in big-endian order.
__WritesAttribute.gcs.create.time.description=The creation time of the object (milliseconds)
__WritesAttribute.gcs.update.time.description=The last modification time of the object (milliseconds)
__WritesAttribute.gcs.encryption.algorithm.description=The algorithm used to encrypt the object.
__WritesAttribute.gcs.encryption.sha256.description=The SHA256 hash of the key used to encrypt the object
__WritesAttribute.gcs.etag.description=The HTTP 1.1 Entity tag for the object.
__WritesAttribute.gcs.generated.id.description=The service-generated for the object
__WritesAttribute.gcs.generation.description=The data generation of the object.
__WritesAttribute.gcs.md5.description=The MD5 hash of the object's data encoded in base64.
__WritesAttribute.gcs.media.link.description=The media download link to the object.
__WritesAttribute.gcs.metageneration.description=The metageneration of the object.
__WritesAttribute.gcs.owner.description=The owner (uploader) of the object.
__WritesAttribute.gcs.owner.type.description=The ACL entity type of the uploader of the object.
__WritesAttribute.gcs.uri.description=The URI of the object as a string.
__Stateful.description=After performing a listing of keys, the timestamp of the newest key is stored, along with the keys that share that same timestamp. This allows the Processor to list only keys that have been added or modified after this date the next time that the Processor is run. State is stored across the cluster so that this Processor can be run on Primary Node only and if a new Primary Node is selected, the new node can pick up where the previous node left off, without duplicating the data.
