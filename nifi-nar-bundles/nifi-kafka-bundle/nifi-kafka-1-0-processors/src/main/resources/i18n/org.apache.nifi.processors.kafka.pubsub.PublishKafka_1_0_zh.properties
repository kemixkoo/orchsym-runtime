__CapabilityDescription=Sends the contents of a FlowFile as a message to Apache Kafka using the Kafka 1.0 Producer API.The messages to send may be individual FlowFiles or may be delimited, using a user-specified delimiter, such as a new-line. The complementary NiFi processor for fetching messages is ConsumeKafka_1_0.
__Tags=Apache, Kafka, Put, Send, Message, PubSub, 1.0
bootstrap.servers.displayName=Kafka Brokers
bootstrap.servers.description=A comma-separated list of known Kafka Brokers in the format <host>\:<port>
security.protocol.displayName=Security Protocol
security.protocol.description=Protocol used to communicate with brokers. Corresponds to Kafka's 'security.protocol' property.
__AllowableValue.security.protocol.PLAINTEXT.displayName=PLAINTEXT
__AllowableValue.security.protocol.PLAINTEXT.description=PLAINTEXT
__AllowableValue.security.protocol.SASL_PLAINTEXT.displayName=SASL_PLAINTEXT
__AllowableValue.security.protocol.SASL_PLAINTEXT.description=SASL_PLAINTEXT
__AllowableValue.security.protocol.SASL_SSL.displayName=SASL_SSL
__AllowableValue.security.protocol.SASL_SSL.description=SASL_SSL
__AllowableValue.security.protocol.SSL.displayName=SSL
__AllowableValue.security.protocol.SSL.description=SSL
sasl.kerberos.service.name.displayName=Kerberos Service Name
sasl.kerberos.service.name.description=The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config. Corresponds to Kafka's 'security.protocol' property.It is ignored unless one of the SASL options of the <Security Protocol> are selected.
kerberos-credentials-service.displayName=Kerberos Credentials Service
kerberos-credentials-service.description=Specifies the Kerberos Credentials Controller Service that should be used for authenticating with Kerberos
sasl.kerberos.principal.displayName=Kerberos Principal
sasl.kerberos.principal.description=The Kerberos principal that will be used to connect to brokers. If not set, it is expected to set a JAAS configuration file in the JVM properties defined in the bootstrap.conf file. This principal will be set into 'sasl.jaas.config' Kafka's property.
sasl.kerberos.keytab.displayName=Kerberos Keytab
sasl.kerberos.keytab.description=The Kerberos keytab that will be used to connect to brokers. If not set, it is expected to set a JAAS configuration file in the JVM properties defined in the bootstrap.conf file. This principal will be set into 'sasl.jaas.config' Kafka's property.
ssl.context.service.displayName=SSL Context Service
ssl.context.service.description=Specifies the SSL Context Service to use for communicating with Kafka.
topic.displayName=Topic Name
topic.description=The name of the Kafka Topic to publish to.
acks.displayName=Delivery Guarantee
acks.description=Specifies the requirement for guaranteeing that a message is sent to Kafka. Corresponds to Kafka's 'acks' property.
__AllowableValue.acks.0.displayName=Best Effort
__AllowableValue.acks.0.description=FlowFile will be routed to success after successfully writing the content to a Kafka node, without waiting for a response. This provides the best performance but may result in data loss.
__AllowableValue.acks.1.displayName=Guarantee Single Node Delivery
__AllowableValue.acks.1.description=FlowFile will be routed to success if the message is received by a single Kafka node, whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> but can result in data loss if a Kafka node crashes
__AllowableValue.acks.all.displayName=Guarantee Replicated Delivery
__AllowableValue.acks.all.description=FlowFile will be routed to failure unless the message is replicated to the appropriate number of Kafka Nodes according to the Topic configuration
use-transactions.displayName=Use Transactions
use-transactions.description=Specifies whether or not NiFi should provide Transactional guarantees when communicating with Kafka. If there is a problem sending data to Kafka, and this property is set to false, then the messages that have already been sent to Kafka will continue on and be delivered to consumers. If this is set to true, then the Kafka transaction will be rolled back so that those messages are not available to consumers. Setting this to true requires that the <Delivery Guarantee> property be set to "Guarantee Replicated Delivery."
__AllowableValue.use-transactions.false.displayName=false
__AllowableValue.use-transactions.true.displayName=true
attribute-name-regex.displayName=Attributes to Send as Headers (Regex)
attribute-name-regex.description=A Regular Expression that is matched against all FlowFile attribute names. Any attribute whose name matches the regex will be added to the Kafka messages as a Header. If not specified, no FlowFile attributes will be added as headers.
message-header-encoding.displayName=Message Header Encoding
message-header-encoding.description=For any attribute that is added as a message header, as configured via the <Attributes to Send as Headers> property, this property indicates the Character Encoding to use for serializing the headers.
kafka-key.displayName=Kafka Key
kafka-key.description=The Key to use for the Message. If not specified, the flow file attribute 'kafka.key' is used as the message key, if it is present.Beware that setting Kafka key and demarcating at the same time may potentially lead to many Kafka messages with the same key.Normally this is not a problem as Kafka does not enforce or assume message and key uniqueness. Still, setting the demarcator and Kafka key at the same time poses a risk of data loss on Kafka. During a topic compaction on Kafka, messages will be deduplicated based on this key.
key-attribute-encoding.displayName=Key Attribute Encoding
key-attribute-encoding.description=FlowFiles that are emitted have an attribute named 'kafka.key'. This property dictates how the value of the attribute should be encoded.
__AllowableValue.key-attribute-encoding.hex.displayName=Hex Encoded
__AllowableValue.key-attribute-encoding.hex.description=The key is interpreted as arbitrary binary data that is encoded using hexadecimal characters with uppercase letters.
__AllowableValue.key-attribute-encoding.utf-8.displayName=UTF-8 Encoded
__AllowableValue.key-attribute-encoding.utf-8.description=The key is interpreted as a UTF-8 Encoded string.
message-demarcator.displayName=Message Demarcator
message-demarcator.description=Specifies the string (interpreted as UTF-8) to use for demarcating multiple messages within a single FlowFile. If not specified, the entire content of the FlowFile will be used as a single message. If specified, the contents of the FlowFile will be split on this delimiter and each section sent as a separate Kafka message. To enter special character such as 'new line' use CTRL+Enter or Shift+Enter, depending on your OS.
max.request.size.displayName=Max Request Size
max.request.size.description=The maximum size of a request in bytes. Corresponds to Kafka's 'max.request.size' property and defaults to 1 MB (1048576).
ack.wait.time.displayName=Acknowledgment Wait Time
ack.wait.time.description=After sending a message to Kafka, this indicates the amount of time that we are willing to wait for a response from Kafka. If Kafka does not acknowledge the message within this time period, the FlowFile will be routed to 'failure'.
max.block.ms.displayName=Max Metadata Wait Time
max.block.ms.description=The amount of time publisher will wait to obtain metadata or wait for the buffer to flush during the 'send' call before failing the entire 'send' call. Corresponds to Kafka's 'max.block.ms' property
partitioner.class.displayName=Partitioner class
partitioner.class.description=Specifies which class to use to compute a partition id for a message. Corresponds to Kafka's 'partitioner.class' property.
__AllowableValue.partitioner.class.org.apache.kafka.clients.producer.internals.DefaultPartitioner.displayName=DefaultPartitioner
__AllowableValue.partitioner.class.org.apache.kafka.clients.producer.internals.DefaultPartitioner.description=Messages will be assigned to random partitions.
__AllowableValue.partitioner.class.org.apache.nifi.processors.kafka.pubsub.PartitionersRoundRobinPartitioner.displayName=RoundRobinPartitioner
__AllowableValue.partitioner.class.org.apache.nifi.processors.kafka.pubsub.PartitionersRoundRobinPartitioner.description=Messages will be assigned partitions in a round-robin fashion, sending the first message to Partition 1, the next Partition to Partition 2, and so on, wrapping as necessary.
compression.type.displayName=Compression Type
compression.type.description=This parameter allows you to specify the compression codec for all data generated by this producer.
__AllowableValue.compression.type.gzip.displayName=gzip
__AllowableValue.compression.type.lz4.displayName=lz4
__AllowableValue.compression.type.none.displayName=none
__AllowableValue.compression.type.snappy.displayName=snappy
The_name_of_a_Kafka_configuration_property..description=These properties will be added on the Kafka configuration after loading any provided configuration properties. In the event a dynamic property represents a property that was already set, its value will be ignored and WARN message logged. For the list of available Kafka properties please refer to\: http\://kafka.apache.org/documentation.html\#configuration. 
__Relationship.success.description=FlowFiles for which all content was sent to Kafka.
__Relationship.failure.description=Any FlowFile that cannot be sent to Kafka will be routed to this Relationship
__WritesAttribute.msg.count.description=The number of messages that were sent to Kafka for this FlowFile. This attribute is added only to FlowFiles that are routed to success. If the <Message Demarcator> Property is not set, this will always be 1, but if the Property is set, it may be greater than 1.
