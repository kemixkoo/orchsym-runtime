__CapabilityDescription=Executes a SQL UPDATE or INSERT command. The content of an incoming FlowFile is expected to be the SQL command to execute. The SQL command may use the ? to escape parameters. In this case, the parameters to use must exist as FlowFile attributes with the naming convention sql.args.N.type and sql.args.N.value, where N is a positive integer. The sql.args.N.type is expected to be a number indicating the JDBC Type. The content of the FlowFile is expected to be in UTF-8 format.
__Tags=sql, put, rdbms, database, update, insert, relational
JDBC_Connection_Pool.displayName=JDBC Connection Pool
JDBC_Connection_Pool.description=Specifies the JDBC Connection Pool to use in order to convert the JSON message to a SQL statement. The Connection Pool is necessary in order to determine the appropriate database column types.
putsql-sql-statement.displayName=SQL Statement
putsql-sql-statement.description=The SQL statement to execute. The statement can be empty, a constant value, or built from attributes using Expression Language. If this property is specified, it will be used regardless of the content of incoming flowfiles. If this property is empty, the content of the incoming flow file is expected to contain a valid SQL statement, to be issued by the processor to the database.
Support_Fragmented_Transactions.displayName=Support Fragmented Transactions
Support_Fragmented_Transactions.description=If true, when a FlowFile is consumed by this Processor, the Processor will first check the fragment.identifier and fragment.count attributes of that FlowFile. If the fragment.count value is greater than 1, the Processor will not process any FlowFile with that fragment.identifier until all are available; at that point, it will process all FlowFiles with that fragment.identifier as a single transaction, in the order specified by the FlowFiles' fragment.index attributes. This Provides atomicity of those SQL statements. If this value is false, these attributes will be ignored and the updates will occur independent of one another.
__AllowableValue.Support_Fragmented_Transactions.true.displayName=true
__AllowableValue.Support_Fragmented_Transactions.false.displayName=false
Transaction_Timeout.displayName=Transaction Timeout
Transaction_Timeout.description=If the <Support Fragmented Transactions> property is set to true, specifies how long to wait for all FlowFiles for a particular fragment.identifier attribute to arrive before just transferring all of the FlowFiles with that identifier to the 'failure' relationship
Batch_Size.displayName=Batch Size
Batch_Size.description=The preferred number of FlowFiles to put to the database in a single transaction
Obtain_Generated_Keys.displayName=Obtain Generated Keys
Obtain_Generated_Keys.description=If true, any key that is automatically generated by the database will be added to the FlowFile that generated it using the sql.generate.key attribute. This may result in slightly slower performance and is not supported by all databases.
__AllowableValue.Obtain_Generated_Keys.true.displayName=\u662f
__AllowableValue.Obtain_Generated_Keys.false.displayName=\u5426
rollback-on-failure.displayName=\u5931\u8d25\u56de\u6eda
rollback-on-failure.description=Specify how to handle error. By default (false), if an error occurs while processing a FlowFile, the FlowFile will be routed to 'failure' or 'retry' relationship based on error type, and processor can continue with next FlowFile. Instead, you may want to rollback currently processed FlowFiles and stop further processing immediately. In that case, you can do so by enabling this 'Rollback On Failure' property.  If enabled, failed FlowFiles will stay in the input relationship without penalizing it and being processed repeatedly until it gets processed successfully or removed by other means. It is important to set adequate 'Yield Duration' to avoid retrying too frequently.
__AllowableValue.rollback-on-failure.true.displayName=\u56de\u6eda
__AllowableValue.rollback-on-failure.false.displayName=\u4e0d\u56de\u6eda
__Relationship.retry.description=A FlowFile is routed to this relationship if the database cannot be updated but attempting the operation again may succeed
__Relationship.success.description=A FlowFile is routed to this relationship after the database is successfully updated
__Relationship.failure.description=A FlowFile is routed to this relationship if the database cannot be updated and retrying the operation will also fail, such as an invalid query or an integrity constraint violation
__ReadsAttribute.fragment.identifier.description=If the <Support Fragment Transactions> property is true, this attribute is used to determine whether or not two FlowFiles belong to the same transaction.
__ReadsAttribute.fragment.count.description=If the <Support Fragment Transactions> property is true, this attribute is used to determine how many FlowFiles are needed to complete the transaction.
__ReadsAttribute.fragment.index.description=If the <Support Fragment Transactions> property is true, this attribute is used to determine the order that the FlowFiles in a transaction should be evaluated.
__ReadsAttribute.sql.args.N.type.description=Incoming FlowFiles are expected to be parametrized SQL statements. The type of each Parameter is specified as an integer that represents the JDBC Type of the parameter.
__ReadsAttribute.sql.args.N.value.description=Incoming FlowFiles are expected to be parametrized SQL statements. The value of the Parameters are specified as sql.args.1.value, sql.args.2.value, sql.args.3.value, and so on. The type of the sql.args.1.value Parameter is specified by the sql.args.1.type attribute.
__ReadsAttribute.sql.args.N.format.description=This attribute is always optional, but default options may not always work for your data. Incoming FlowFiles are expected to be parametrized SQL statements. In some cases a format option needs to be specified, currently this is only applicable for binary data types, dates, times and timestamps. Binary Data Types (defaults to 'ascii') - ascii\: each string character in your attribute value represents a single byte. This is the format provided by Avro Processors. base64\: the string is a Base64 encoded string that can be decoded to bytes. hex\: the string is hex encoded with all letters in upper case and no '0x' at the beginning. Dates/Times/Timestamps - Date, Time and Timestamp formats all support both custom formats or named format ('yyyy-MM-dd','ISO_OFFSET_DATE_TIME') as specified according to java.time.format.DateTimeFormatter. If not specified, a long value input is expected to be an unix epoch (milli seconds from 1970/1/1), or a string value in 'yyyy-MM-dd' format for Date, 'HH\:mm\:ss.SSS' for Time (some database engines e.g. Derby or MySQL do not support milliseconds and will truncate milliseconds), 'yyyy-MM-dd HH\:mm\:ss.SSS' for Timestamp is used.
__WritesAttribute.sql.generated.key.description=If the database generated a key for an INSERT statement and the Obtain Generated Keys property is set to true, this attribute will be added to indicate the generated key, if possible. This feature is not supported by all database vendors.
