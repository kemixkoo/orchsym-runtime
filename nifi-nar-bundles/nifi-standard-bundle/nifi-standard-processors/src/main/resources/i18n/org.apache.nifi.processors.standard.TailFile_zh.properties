__CapabilityDescription="Tails" a file, or a list of files, ingesting data from the file as it is written to the file. The file is expected to be textual. Data is ingested only when a new line is encountered (carriage return or new-line character or combination). If the file to tail is periodically "rolled over", as is generally the case with log files, an optional Rolling Filename Pattern can be used to retrieve data from files that have rolled over, even if the rollover occurred while NiFi was not running (provided that the data still exists upon restart of NiFi). It is generally advisable to set the Run Schedule to a few seconds, rather than running with the default value of 0 secs, as this Processor will consume a lot of resources if scheduled very aggressively. At this time, this Processor does not support ingesting files that have been compressed when 'rolled over'.
__Tags=tail, file, log, text, source
tail-mode.displayName=Tailing mode
tail-mode.description=Mode to use\: single file will tail only one file, multiple file will look for a list of file. In Multiple mode the Base directory is required.
__AllowableValue.tail-mode.Single_file.displayName=Single file
__AllowableValue.tail-mode.Single_file.description=In this mode, only the one file indicated in the 'Files to tail' property will be watched by the processor. In this mode, the file may not exist when starting the processor.
__AllowableValue.tail-mode.Multiple_files.displayName=Multiple files
__AllowableValue.tail-mode.Multiple_files.description=In this mode, the 'Files to tail' property accepts a regular expression and the processor will look for files in 'Base directory' to list the files to tail by the processor.
File_to_Tail.displayName=File(s) to Tail
File_to_Tail.description=Path of the file to tail in case of single file mode. If using multifile mode, regular expression to find files to tail in the base directory. In case recursivity is set to true, the regular expression will be used to match the path starting from the base directory (see additional details for examples).
Rolling_Filename_Pattern.displayName=Rolling Filename Pattern
Rolling_Filename_Pattern.description=If the file to tail "rolls over" as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ?, it also supports the notation ${filename} to specify a pattern based on the name of the file (without extension), and will assume that the files that have rolled over live in the same directory as the file being tailed. The same glob pattern will be used for all files.
tail-base-directory.displayName=Base directory
tail-base-directory.description=Base directory used to look for files to tail. This property is required when using Multifile mode.
Initial_Start_Position.displayName=Initial Start Position
Initial_Start_Position.description=When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from a file, the Processor will continue from the last point from which it has received data.
__AllowableValue.Initial_Start_Position.Beginning_of_Time.displayName=Beginning of Time
__AllowableValue.Initial_Start_Position.Beginning_of_Time.description=Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail
__AllowableValue.Initial_Start_Position.Beginning_of_File.displayName=Beginning of File
__AllowableValue.Initial_Start_Position.Beginning_of_File.description=Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over
__AllowableValue.Initial_Start_Position.Current_Time.displayName=Current Time
__AllowableValue.Initial_Start_Position.Current_Time.description=Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.
File_Location.displayName=State Location
File_Location.description=Specifies where the state is located either local or cluster so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi
__AllowableValue.File_Location.Local.displayName=Local
__AllowableValue.File_Location.Local.description=State is stored locally. Each node in a cluster will tail a different file.
__AllowableValue.File_Location.Remote.displayName=Remote
__AllowableValue.File_Location.Remote.description=State is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.
tailfile-recursive-lookup.displayName=Recursive lookup
tailfile-recursive-lookup.description=When using Multiple files mode, this property defines if files must be listed recursively or not in the base directory.
__AllowableValue.tailfile-recursive-lookup.true.displayName=true
__AllowableValue.tailfile-recursive-lookup.false.displayName=false
tailfile-lookup-frequency.displayName=Lookup frequency
tailfile-lookup-frequency.description=Only used in Multiple files mode and Changing name rolling strategy. It specifies the minimum duration the processor will wait before listing again the files to tail.
tailfile-maximum-age.displayName=Maximum age
tailfile-maximum-age.description=Only used in Multiple files mode and Changing name rolling strategy. It specifies the necessary minimum duration to consider that no new messages will be appended in a file regarding its last modification date. This should not be set too low to avoid duplication of data in case new messages are appended at a lower frequency.
__Relationship.success.description=All FlowFiles are routed to this Relationship.
__WritesAttribute.tailfile.original.path.description=Path of the original file the flow file comes from.
__Stateful.description=Stores state about where in the Tailed File it left off so that on restart it does not have to duplicate data. State is stored either local or clustered depend on the <File Location> property.
__Restriction.read-filesystem.label=read filesystem
__Restriction.read-filesystem.explanation=Provides operator the ability to read from any file that NiFi has access to.
