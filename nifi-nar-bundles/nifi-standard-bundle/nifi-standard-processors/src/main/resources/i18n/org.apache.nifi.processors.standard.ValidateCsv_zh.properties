__CapabilityDescription=Validates the contents of FlowFiles against a user-specified CSV schema. Take a look at the additional documentation of this processor for some schema examples.
__Tags=csv, schema, validation
validate-csv-schema.displayName=Schema
validate-csv-schema.description=The schema to be used for validation. Is expected a comma-delimited string representing the cell processors to apply. The following cell processors are allowed in the schema definition\: [ParseBigDecimal, ParseBool, ParseChar, ParseDate, ParseDouble, ParseInt, ParseLong, Optional, DMinMax, Equals, ForbidSubStr, LMinMax, NotNull, Null, RequireHashCode, RequireSubStr, Strlen, StrMinMax, StrNotNullOrEmpty, StrRegEx, Unique, UniqueHashCode, IsIncludedIn]. Note\: cell processors cannot be nested except with Optional.
validate-csv-header.displayName=Header
validate-csv-header.description=True if the incoming flow file contains a header to ignore, false otherwise.
__AllowableValue.validate-csv-header.false.displayName=false
__AllowableValue.validate-csv-header.true.displayName=true
validate-csv-delimiter.displayName=Delimiter character
validate-csv-delimiter.description=Character used as 'delimiter' in the incoming data. Example\: ,
validate-csv-quote.displayName=Quote character
validate-csv-quote.description=Character used as 'quote' in the incoming data. Example\: "
validate-csv-eol.displayName=End of line symbols
validate-csv-eol.description=Symbols used as 'end of line' in the incoming data. Example\: \\n
validate-csv-strategy.displayName=Validation strategy
validate-csv-strategy.description=Strategy to apply when routing input files to output relationships.
__AllowableValue.validate-csv-strategy.FlowFile_validation.displayName=FlowFile validation
__AllowableValue.validate-csv-strategy.FlowFile_validation.description=As soon as an error is found in the CSV file, the validation will stop and the whole flow file will be routed to the 'invalid' relationship. This option offers best performances.
__AllowableValue.validate-csv-strategy.Line_by_line_validation.displayName=Line by line validation
__AllowableValue.validate-csv-strategy.Line_by_line_validation.description=In case an error is found, the input CSV file will be split into two FlowFiles\: one routed to the 'valid' relationship containing all the correct lines and one routed to the 'invalid' relationship containing all the incorrect lines. Take care if choosing this option while using Unique cell processors in schema definition\:the first occurrence will be considered valid and the next ones as invalid.
__Relationship.valid.description=FlowFiles that are successfully validated against the schema are routed to this relationship
__Relationship.invalid.description=FlowFiles that are not valid according to the specified schema are routed to this relationship
__WritesAttribute.count.valid.lines.description=If line by line validation, number of valid lines extracted from the source data
__WritesAttribute.count.invalid.lines.description=If line by line validation, number of invalid lines extracted from the source data
__WritesAttribute.count.total.lines.description=If line by line validation, total number of lines in the source data
__WritesAttribute.validation.error.message.description=For flow files routed to invalid, message of the first validation error
