__CapabilityDescription=Validates the Records of an incoming FlowFile against a given schema. All records that adhere to the schema are routed to the "valid" relationship while records that do not adhere to the schema are routed to the "invalid" relationship. It is therefore possible for a single incoming FlowFile to be split into two individual FlowFiles if some records are valid according to the schema and others are not. Any FlowFile that is routed to the "invalid" relationship will emit a ROUTE Provenance Event with the Details field populated to explain why records were invalid. In addition, to gain further explanation of why records were invalid, DEBUG-level logging can be enabled for the "org.apache.nifi.processors.standard.ValidateRecord" logger.
__Tags=record, schema, validate
record-reader.displayName=Record Reader
record-reader.description=Specifies the Controller Service to use for reading incoming data
record-writer.displayName=Record Writer
record-writer.description=Specifies the Controller Service to use for writing out the records
invalid-record-writer.displayName=Record Writer for Invalid Records
invalid-record-writer.description=If specified, this Controller Service will be used to write out any records that are invalid. If not specified, the writer specified by the "Record Writer" property will be used. This is useful, for example, when the configured Record Writer cannot write data that does not adhere to its schema (as is the case with Avro) or when it is desirable to keep invalid records in their original format while converting valid records to another format.
schema-access-strategy.displayName=Schema Access Strategy
schema-access-strategy.description=Specifies how to obtain the schema that should be used to validate records
__AllowableValue.schema-access-strategy.reader-schema.displayName=Use Reader's Schema
__AllowableValue.schema-access-strategy.reader-schema.description=The schema to validate the data against is determined by asking the configured Record Reader for its schema
__AllowableValue.schema-access-strategy.schema-name-property.displayName=Use Schema Name Property
__AllowableValue.schema-access-strategy.schema-name-property.description=The schema to validate the data against is determined by looking at the 'Schema Name' Property and looking up the schema in the configured Schema Registry
__AllowableValue.schema-access-strategy.schema-text-property.displayName=Use Schema Text Property
__AllowableValue.schema-access-strategy.schema-text-property.description=The schema to validate the data against is determined by looking at the 'Schema Text' Property and parsing the schema as an Avro schema
schema-registry.displayName=Schema Registry
schema-registry.description=Specifies the Controller Service to use for the Schema Registry. This is necessary only if the Schema Access Strategy is set to "Use 'Schema Name' Property".
schema-name.displayName=Schema Name
schema-name.description=Specifies the name of the schema to lookup in the Schema Registry property
schema-text.displayName=Schema Text
schema-text.description=The text of an Avro-formatted Schema
allow-extra-fields.displayName=Allow Extra Fields
allow-extra-fields.description=If the incoming data has fields that are not present in the schema, this property determines whether or not the Record is valid. If true, the Record is still valid. If false, the Record will be invalid due to the extra fields.
__AllowableValue.allow-extra-fields.false.displayName=\u4e0d\u5141\u8bb8
__AllowableValue.allow-extra-fields.true.displayName=\u5141\u8bb8
strict-type-checking.displayName=Strict Type Checking
strict-type-checking.description=If the incoming data has a Record where a field is not of the correct type, this property determine whether how to handle the Record. If true, the Record will still be considered invalid. If false, the Record will be considered valid and the field will be coerced into the correct type (if possible, according to the type coercion supported by the Record Writer).
__AllowableValue.strict-type-checking.false.displayName=\u5426
__AllowableValue.strict-type-checking.true.displayName=\u662f
__Relationship.valid.description=Records that are valid according to the schema will be routed to this relationship
__Relationship.invalid.description=Records that are not valid according to the schema will be routed to this relationship
__Relationship.failure.description=If the records cannot be read, validated, or written, for any reason, the original FlowFile will be routed to this relationship
__WritesAttribute.mime.type.description=Sets the mime.type attribute to the MIME Type specified by the Record Writer
__WritesAttribute.record.count.description=The number of records in the FlowFile routed to a relationship
